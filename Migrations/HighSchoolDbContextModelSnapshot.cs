// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Skola.Models;

#nullable disable

namespace Skola.Migrations
{
    [DbContext(typeof(HighSchoolDbContext))]
    partial class HighSchoolDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Skola.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Class1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Class");

                    b.HasKey("Id");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("Skola.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Hired")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Phonenumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.Property<int>("Staffid")
                        .HasColumnType("int")
                        .HasColumnName("staffid");

                    b.HasKey("Id");

                    b.HasIndex("Staffid");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Skola.Models.EmployeeDateYear", b =>
                {
                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<DateTime>("Hired")
                        .HasColumnType("date");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("EmployeeDateYear");
                });

            modelBuilder.Entity("Skola.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("ClassID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Grade1")
                        .HasColumnType("int")
                        .HasColumnName("Grade");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int")
                        .HasColumnName("TeacherID");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("Skola.Models.staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("Skola.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FName");

                    b.Property<string>("Lname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LName");

                    b.Property<string>("PersonNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("Skola.Models.StudentClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("ClassID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClass", (string)null);
                });

            modelBuilder.Entity("Skola.Models.VwaverageSalary", b =>
                {
                    b.Property<decimal?>("AverageSalary")
                        .HasColumnType("money");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("VWaverageSalary");
                });

            modelBuilder.Entity("Skola.Models.VwcostPerDepartment", b =>
                {
                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TotalSalary")
                        .HasColumnType("money");

                    b.ToView("VWCostPerDepartment");
                });

            modelBuilder.Entity("Skola.Models.Employee", b =>
                {
                    b.HasOne("Skola.Models.staff", "Staff")
                        .WithMany("Employees")
                        .HasForeignKey("Staffid")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Staff");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Skola.Models.Grade", b =>
                {
                    b.HasOne("Skola.Models.Class", "Class")
                        .WithMany("Grades")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Grade_Class");

                    b.HasOne("Skola.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Grade_Student1");

                    b.HasOne("Skola.Models.Employee", "Teacher")
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Grade_Employee");

                    b.Navigation("Class");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Skola.Models.StudentClass", b =>
                {
                    b.HasOne("Skola.Models.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentClass_Class");

                    b.HasOne("Skola.Models.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentClass_Student");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Skola.Models.Class", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("Skola.Models.Employee", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Skola.Models.staff", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Skola.Models.Student", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("StudentClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
